{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mover = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Enums_1 = require(\"../../Enums\");\n\nclass Mover {\n  constructor(container, particle) {\n    this.container = container;\n    this.particle = particle;\n  }\n\n  move(delta) {\n    const particle = this.particle;\n    particle.bubble.inRange = false;\n    particle.links = [];\n\n    for (const [, plugin] of this.container.plugins) {\n      if (particle.destroyed) {\n        break;\n      }\n\n      if (plugin.particleUpdate) {\n        plugin.particleUpdate(particle, delta);\n      }\n    }\n\n    if (particle.destroyed) {\n      return;\n    }\n\n    this.moveParticle(delta);\n    this.moveParallax();\n  }\n\n  moveParticle(delta) {\n    var _a, _b;\n\n    const particle = this.particle;\n    const particlesOptions = particle.options;\n\n    if (!particlesOptions.move.enable) {\n      return;\n    }\n\n    const container = this.container;\n    const slowFactor = this.getProximitySpeedFactor();\n    const baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : Utils_1.NumberUtils.getRangeValue(particle.options.move.speed) * container.retina.pixelRatio) * container.retina.reduceFactor;\n    const maxSize = Utils_1.NumberUtils.getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n    const sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\n    const moveSpeed = baseSpeed / 2 * sizeFactor * slowFactor * delta.factor;\n    const moveDrift = (_b = particle.moveDrift) !== null && _b !== void 0 ? _b : Utils_1.NumberUtils.getRangeValue(particle.options.move.drift) * container.retina.pixelRatio;\n    this.applyPath(delta);\n    const gravityOptions = particlesOptions.move.gravity;\n\n    if (gravityOptions.enable) {\n      particle.velocity.y += gravityOptions.acceleration * delta.factor / (60 * moveSpeed);\n    }\n\n    if (moveSpeed) {\n      particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n    }\n\n    const decay = 1 - particle.options.move.decay;\n    particle.velocity.multTo(decay);\n    const velocity = particle.velocity.mult(moveSpeed);\n\n    if (gravityOptions.enable && velocity.y >= gravityOptions.maxSpeed && gravityOptions.maxSpeed > 0) {\n      velocity.y = gravityOptions.maxSpeed;\n\n      if (moveSpeed) {\n        particle.velocity.y = velocity.y / moveSpeed;\n      }\n    }\n\n    particle.position.addTo(velocity);\n\n    if (particlesOptions.move.vibrate) {\n      particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n      particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n    }\n\n    const initialPosition = particle.initialPosition;\n    const initialDistance = Utils_1.NumberUtils.getDistance(initialPosition, particle.position);\n\n    if (particle.maxDistance) {\n      if (initialDistance >= particle.maxDistance && !particle.misplaced) {\n        particle.misplaced = initialDistance > particle.maxDistance;\n        particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n      } else if (initialDistance < particle.maxDistance && particle.misplaced) {\n        particle.misplaced = false;\n      } else if (particle.misplaced) {\n        if (particle.position.x < initialPosition.x && particle.velocity.x < 0 || particle.position.x > initialPosition.x && particle.velocity.x > 0) {\n          particle.velocity.x *= -Math.random();\n        }\n\n        if (particle.position.y < initialPosition.y && particle.velocity.y < 0 || particle.position.y > initialPosition.y && particle.velocity.y > 0) {\n          particle.velocity.y *= -Math.random();\n        }\n      }\n    }\n  }\n\n  applyPath(delta) {\n    const particle = this.particle;\n    const particlesOptions = particle.options;\n    const pathOptions = particlesOptions.move.path;\n    const pathEnabled = pathOptions.enable;\n\n    if (!pathEnabled) {\n      return;\n    }\n\n    const container = this.container;\n\n    if (particle.lastPathTime <= particle.pathDelay) {\n      particle.lastPathTime += delta.value;\n      return;\n    }\n\n    let generator = container.pathGenerator;\n\n    if (pathOptions.generator) {\n      const customGenerator = Utils_1.Plugins.getPathGenerator(pathOptions.generator);\n\n      if (customGenerator) {\n        generator = customGenerator;\n      }\n    }\n\n    const path = generator.generate(particle);\n    particle.velocity.addTo(path);\n\n    if (pathOptions.clamp) {\n      particle.velocity.x = Utils_1.NumberUtils.clamp(particle.velocity.x, -1, 1);\n      particle.velocity.y = Utils_1.NumberUtils.clamp(particle.velocity.y, -1, 1);\n    }\n\n    particle.lastPathTime -= particle.pathDelay;\n  }\n\n  moveParallax() {\n    const container = this.container;\n    const options = container.actualOptions;\n\n    if (Utils_1.Utils.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n      return;\n    }\n\n    const particle = this.particle;\n    const parallaxForce = options.interactivity.events.onHover.parallax.force;\n    const mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const canvasCenter = {\n      x: container.canvas.size.width / 2,\n      y: container.canvas.size.height / 2\n    };\n    const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n    const factor = particle.getRadius() / parallaxForce;\n    const tmp = {\n      x: (mousePos.x - canvasCenter.x) * factor,\n      y: (mousePos.y - canvasCenter.y) * factor\n    };\n    particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n    particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n  }\n\n  getProximitySpeedFactor() {\n    const container = this.container;\n    const options = container.actualOptions;\n    const active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n\n    if (!active) {\n      return 1;\n    }\n\n    const mousePos = this.container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return 1;\n    }\n\n    const particlePos = this.particle.getPosition();\n    const dist = Utils_1.NumberUtils.getDistance(mousePos, particlePos);\n    const radius = container.retina.slowModeRadius;\n\n    if (dist > radius) {\n      return 1;\n    }\n\n    const proximityFactor = dist / radius || 0;\n    const slowFactor = options.interactivity.modes.slow.factor;\n    return proximityFactor / slowFactor;\n  }\n\n}\n\nexports.Mover = Mover;","map":{"version":3,"sources":["D:/React-Portfolio/node_modules/tsparticles/dist/Core/Particle/Mover.js"],"names":["Object","defineProperty","exports","value","Mover","Utils_1","require","Enums_1","constructor","container","particle","move","delta","bubble","inRange","links","plugin","plugins","destroyed","particleUpdate","moveParticle","moveParallax","_a","_b","particlesOptions","options","enable","slowFactor","getProximitySpeedFactor","baseSpeed","moveSpeed","NumberUtils","getRangeValue","speed","retina","pixelRatio","reduceFactor","maxSize","getRangeMax","size","sizeFactor","getRadius","factor","moveDrift","drift","applyPath","gravityOptions","gravity","velocity","y","acceleration","x","decay","multTo","mult","maxSpeed","position","addTo","vibrate","Math","sin","cos","initialPosition","initialDistance","getDistance","maxDistance","misplaced","random","pathOptions","path","pathEnabled","lastPathTime","pathDelay","generator","pathGenerator","customGenerator","Plugins","getPathGenerator","generate","clamp","actualOptions","Utils","isSsr","interactivity","events","onHover","parallax","parallaxForce","force","mousePos","mouse","canvasCenter","canvas","width","height","parallaxSmooth","smooth","tmp","offset","active","isInArray","HoverMode","slow","mode","particlePos","getPosition","dist","radius","slowModeRadius","proximityFactor","modes"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Mover = void 0;\r\nconst Utils_1 = require(\"../../Utils\");\r\nconst Enums_1 = require(\"../../Enums\");\r\nclass Mover {\r\n    constructor(container, particle) {\r\n        this.container = container;\r\n        this.particle = particle;\r\n    }\r\n    move(delta) {\r\n        const particle = this.particle;\r\n        particle.bubble.inRange = false;\r\n        particle.links = [];\r\n        for (const [, plugin] of this.container.plugins) {\r\n            if (particle.destroyed) {\r\n                break;\r\n            }\r\n            if (plugin.particleUpdate) {\r\n                plugin.particleUpdate(particle, delta);\r\n            }\r\n        }\r\n        if (particle.destroyed) {\r\n            return;\r\n        }\r\n        this.moveParticle(delta);\r\n        this.moveParallax();\r\n    }\r\n    moveParticle(delta) {\r\n        var _a, _b;\r\n        const particle = this.particle;\r\n        const particlesOptions = particle.options;\r\n        if (!particlesOptions.move.enable) {\r\n            return;\r\n        }\r\n        const container = this.container;\r\n        const slowFactor = this.getProximitySpeedFactor();\r\n        const baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : Utils_1.NumberUtils.getRangeValue(particle.options.move.speed) * container.retina.pixelRatio) *\r\n            container.retina.reduceFactor;\r\n        const maxSize = Utils_1.NumberUtils.getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\r\n        const sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\r\n        const moveSpeed = (baseSpeed / 2) * sizeFactor * slowFactor * delta.factor;\r\n        const moveDrift = (_b = particle.moveDrift) !== null && _b !== void 0 ? _b : Utils_1.NumberUtils.getRangeValue(particle.options.move.drift) * container.retina.pixelRatio;\r\n        this.applyPath(delta);\r\n        const gravityOptions = particlesOptions.move.gravity;\r\n        if (gravityOptions.enable) {\r\n            particle.velocity.y += (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\r\n        }\r\n        if (moveSpeed) {\r\n            particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\r\n        }\r\n        const decay = 1 - particle.options.move.decay;\r\n        particle.velocity.multTo(decay);\r\n        const velocity = particle.velocity.mult(moveSpeed);\r\n        if (gravityOptions.enable && velocity.y >= gravityOptions.maxSpeed && gravityOptions.maxSpeed > 0) {\r\n            velocity.y = gravityOptions.maxSpeed;\r\n            if (moveSpeed) {\r\n                particle.velocity.y = velocity.y / moveSpeed;\r\n            }\r\n        }\r\n        particle.position.addTo(velocity);\r\n        if (particlesOptions.move.vibrate) {\r\n            particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\r\n            particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\r\n        }\r\n        const initialPosition = particle.initialPosition;\r\n        const initialDistance = Utils_1.NumberUtils.getDistance(initialPosition, particle.position);\r\n        if (particle.maxDistance) {\r\n            if (initialDistance >= particle.maxDistance && !particle.misplaced) {\r\n                particle.misplaced = initialDistance > particle.maxDistance;\r\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\r\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\r\n            }\r\n            else if (initialDistance < particle.maxDistance && particle.misplaced) {\r\n                particle.misplaced = false;\r\n            }\r\n            else if (particle.misplaced) {\r\n                if ((particle.position.x < initialPosition.x && particle.velocity.x < 0) ||\r\n                    (particle.position.x > initialPosition.x && particle.velocity.x > 0)) {\r\n                    particle.velocity.x *= -Math.random();\r\n                }\r\n                if ((particle.position.y < initialPosition.y && particle.velocity.y < 0) ||\r\n                    (particle.position.y > initialPosition.y && particle.velocity.y > 0)) {\r\n                    particle.velocity.y *= -Math.random();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    applyPath(delta) {\r\n        const particle = this.particle;\r\n        const particlesOptions = particle.options;\r\n        const pathOptions = particlesOptions.move.path;\r\n        const pathEnabled = pathOptions.enable;\r\n        if (!pathEnabled) {\r\n            return;\r\n        }\r\n        const container = this.container;\r\n        if (particle.lastPathTime <= particle.pathDelay) {\r\n            particle.lastPathTime += delta.value;\r\n            return;\r\n        }\r\n        let generator = container.pathGenerator;\r\n        if (pathOptions.generator) {\r\n            const customGenerator = Utils_1.Plugins.getPathGenerator(pathOptions.generator);\r\n            if (customGenerator) {\r\n                generator = customGenerator;\r\n            }\r\n        }\r\n        const path = generator.generate(particle);\r\n        particle.velocity.addTo(path);\r\n        if (pathOptions.clamp) {\r\n            particle.velocity.x = Utils_1.NumberUtils.clamp(particle.velocity.x, -1, 1);\r\n            particle.velocity.y = Utils_1.NumberUtils.clamp(particle.velocity.y, -1, 1);\r\n        }\r\n        particle.lastPathTime -= particle.pathDelay;\r\n    }\r\n    moveParallax() {\r\n        const container = this.container;\r\n        const options = container.actualOptions;\r\n        if (Utils_1.Utils.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\r\n            return;\r\n        }\r\n        const particle = this.particle;\r\n        const parallaxForce = options.interactivity.events.onHover.parallax.force;\r\n        const mousePos = container.interactivity.mouse.position;\r\n        if (!mousePos) {\r\n            return;\r\n        }\r\n        const canvasCenter = {\r\n            x: container.canvas.size.width / 2,\r\n            y: container.canvas.size.height / 2,\r\n        };\r\n        const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\r\n        const factor = particle.getRadius() / parallaxForce;\r\n        const tmp = {\r\n            x: (mousePos.x - canvasCenter.x) * factor,\r\n            y: (mousePos.y - canvasCenter.y) * factor,\r\n        };\r\n        particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\r\n        particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\r\n    }\r\n    getProximitySpeedFactor() {\r\n        const container = this.container;\r\n        const options = container.actualOptions;\r\n        const active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\r\n        if (!active) {\r\n            return 1;\r\n        }\r\n        const mousePos = this.container.interactivity.mouse.position;\r\n        if (!mousePos) {\r\n            return 1;\r\n        }\r\n        const particlePos = this.particle.getPosition();\r\n        const dist = Utils_1.NumberUtils.getDistance(mousePos, particlePos);\r\n        const radius = container.retina.slowModeRadius;\r\n        if (dist > radius) {\r\n            return 1;\r\n        }\r\n        const proximityFactor = dist / radius || 0;\r\n        const slowFactor = options.interactivity.modes.slow.factor;\r\n        return proximityFactor / slowFactor;\r\n    }\r\n}\r\nexports.Mover = Mover;\r\n"]},"metadata":{},"sourceType":"script"}